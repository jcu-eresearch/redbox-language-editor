{"version":3,"sources":["App.js","index.js"],"names":["isHTML","str","doc","DOMParser","parseFromString","Array","from","body","childNodes","some","node","nodeType","VisualEditor","props","init","skin","content_css","content_css_cors","content_style","max_height","autoresize_bottom_margin","body_class","forced_root_block","force_br_newlines","force_p_newlines","menubar","statusbar","branding","plugins","toolbar","help_tabs","name","title","items","type","html","App","useState","filename","setFilename","uploadedWorkbook","setUploadedWorkbook","DEFAULT_SHEET","sheet","setSheet","rowMetadata","setRowMetadata","window","onbeforeunload","enableVisualEditor","row","prevState","updateCell","column","value","newState","changeAllEditors","slice","length","fill","reduce","acc","index","downloadSheet","worksheet","XLSX","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","SheetNames","writeFile","replace","className","Container","fluid","Row","as","Col","xs","span","order","lg","Button","variant","onClick","path","mdiPlus","size","FormFile","Label","htmlFor","mdiFileUploadOutline","Input","id","onChange","e","file","target","files","reader","FileReader","onload","data","result","read","raw","sheets","Sheets","sheet_to_json","header","readAsBinaryString","accept","DropdownButton","menuAlign","mdiFileDownloadOutline","Dropdown","Item","bsPrefix","mdiCog","mdiMonitorEdit","mdiFormTextbox","Divider","mdiRestart","Table","striped","bordered","style","width","map","rowIndex","sheetRowIndex","Form","Control","placeholder","onEditorChange","content","onFocus","mdiPencil","href","mdiGithub","version","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3dd262e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormFile,\n  Table,\n  DropdownButton,\n  Dropdown,\n} from 'react-bootstrap'\nimport Icon from '@mdi/react'\nimport {\n  mdiCog,\n  mdiFileDownloadOutline,\n  mdiFileUploadOutline,\n  mdiGithub,\n  mdiPencil,\n  mdiPlus,\n  mdiRestart,\n  mdiMonitorEdit,\n  mdiFormTextbox,\n} from '@mdi/js'\nimport XLSX from 'xlsx'\n\nimport tinymce from 'tinymce/tinymce' // eslint-disable-line no-unused-vars\nimport 'tinymce/icons/default'\nimport 'tinymce/themes/silver'\nimport 'tinymce/plugins/autoresize'\nimport 'tinymce/plugins/autolink'\nimport 'tinymce/plugins/advlist'\nimport 'tinymce/plugins/lists'\nimport 'tinymce/plugins/link'\nimport 'tinymce/plugins/image'\nimport 'tinymce/plugins/searchreplace'\nimport 'tinymce/plugins/code'\nimport 'tinymce/plugins/fullscreen'\nimport 'tinymce/plugins/paste'\nimport 'tinymce/plugins/help'\nimport { Editor } from '@tinymce/tinymce-react'\n\nimport { version } from '../package.json'\n\nimport 'tinymce/skins/ui/oxide/skin.css'\nimport 'tinymce/skins/ui/oxide/content.inline.css'\nimport './App.css'\n\nfunction isHTML(str) {\n  const doc = new DOMParser().parseFromString(str, 'text/html')\n  return Array.from(doc.body.childNodes).some(node => node.nodeType === 1)\n}\n\nfunction VisualEditor(props) {\n  return (\n    <Editor\n      init={{\n        skin: false,\n        content_css:\n          'https://cdn.jcu.edu.au/web-framework/1.0.0-beta.1/css/jcu.min.css',\n        content_css_cors: true,\n        content_style: `body { background: #fff; margin: .75rem; }`,\n        max_height: '20rem',\n        autoresize_bottom_margin: 0,\n        body_class: '',\n        forced_root_block: '',\n        force_br_newlines: false,\n        force_p_newlines: false,\n        menubar: false,\n        statusbar: false,\n        branding: false,\n        plugins: [\n          'autoresize',\n          'advlist',\n          'autolink',\n          'lists',\n          'link',\n          'image',\n          'searchreplace',\n          'code',\n          'fullscreen',\n          'paste',\n          'help',\n        ],\n        toolbar:\n          'undo redo searchreplace | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link | removeformat | code | help',\n        help_tabs: [\n          {\n            name: 'languageeditor',\n            title: 'About This App',\n            items: [\n              {\n                type: 'htmlpanel',\n                html: `\n                <p>This editor is for modifying messages used in ReDBox language files.</p>\n                <p>This visual HTML editor is configured to work for:</p>\n                <ul>\n                  <li><strong>Labels</strong>: simple text-based messages which are typically short, single-line strings (allowed content are <strong>bold</strong>, <em>italic</em> and <a href=\"#\">linked text</a>), and</li>\n                  <li><strong>Rich HTML:</strong> more complicated messages that contain multiple paragraphs, styling, headings, bullets, numbering and more.</li>\n                </ul>\n                <p>Because this visual HTML editor needs to work for both types of message, hitting <kbd>Enter</kbd> or <kbd>Return</kbd> will insert a Line Break (<code>&lt;br&gt;</code>) rather than a new Paragraph (<code>&lt;p&gt;</code>). To create a new paragraph, use <kbd>Shift</kbd> + <kbd>Enter/Return</kbd> when entering text.</p>\n                <p>Other help documentation for this visual editor, including shortcuts, is available from the links in this Help panel.</p>\n                `,\n              },\n            ],\n          },\n          'shortcuts',\n          'keyboardnav',\n          'plugins',\n        ],\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction App() {\n  const [filename, setFilename] = useState(null)\n  const [uploadedWorkbook, setUploadedWorkbook] = useState(null)\n  const DEFAULT_SHEET = [\n    ['Key', 'Message'],\n    ['', ''],\n  ]\n  const [sheet, setSheet] = useState(DEFAULT_SHEET)\n  const [rowMetadata, setRowMetadata] = useState({})\n\n  window.onbeforeunload = () => true\n\n  const handleFileUpload = e => {\n    const [file] = e.target.files\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        const data = e.target.result\n        const workbook = XLSX.read(data, {\n          type: 'binary',\n          raw: true,\n          sheets: 0,\n        })\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]]\n        setSheet(XLSX.utils.sheet_to_json(worksheet, { raw: true, header: 1 }))\n        setUploadedWorkbook(workbook)\n        setFilename(file.name)\n        setRowMetadata({})\n      }\n      reader.readAsBinaryString(file)\n    }\n  }\n  const enableVisualEditor = row => {\n    setRowMetadata(prevState => ({\n      ...prevState,\n      [row]: { html: true },\n    }))\n  }\n  const updateCell = (row, column, value) => {\n    setSheet(prevState => {\n      const newState = [...prevState]\n      newState[row][column] = value\n      return newState\n    })\n    if (isHTML(value)) {\n      enableVisualEditor(row)\n    }\n  }\n  const changeAllEditors = value =>\n    value\n      ? setRowMetadata(\n          sheet &&\n            Array(sheet.slice(1).length)\n              .fill({ html: true })\n              .reduce((acc, value, index) => {\n                acc[index + 1] = value\n                return acc\n              }, {})\n        )\n      : setRowMetadata({})\n\n  const downloadSheet = type => {\n    const worksheet = XLSX.utils.aoa_to_sheet(sheet)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(\n      workbook,\n      worksheet,\n      uploadedWorkbook ? uploadedWorkbook.SheetNames[0] : 'language'\n    )\n    XLSX.writeFile(\n      workbook,\n      `${filename ? filename.replace(/\\.[^/.]+$/, '') : 'language'}.${type}`\n    )\n  }\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row\n          as=\"header\"\n          className=\"fixed-top mb-3 p-1 justify-content-between align-items-center border-bottom bg-white shadow\"\n        >\n          <Col xs={{ span: 'auto', order: 3 }} lg={{ span: 'auto', order: 1 }}>\n            <Button\n              variant=\"outline-secondary\"\n              onClick={() => {\n                setSheet(prevState => {\n                  return [...prevState, ['', '']]\n                })\n              }}\n            >\n              <Icon path={mdiPlus} title=\"Add\" size={1} className=\"mr-1\" />\n              Add row\n            </Button>\n          </Col>\n          <Col\n            xs={{ span: 12, order: 1 }}\n            lg={{ span: 'auto', order: 1 }}\n            className=\"text-center\"\n          >\n            <h1 className=\"h6 mb-lg-0\">\n              <span className=\"font-weight-bold\">Visual Language Editor</span>\n              {filename && (\n                <>\n                  : <code>{filename}</code>\n                </>\n              )}\n            </h1>\n          </Col>\n          <Col\n            xs={{ span: 'auto', order: 2 }}\n            lg={{ span: 'auto', order: 3 }}\n            className=\"mb-1 mb-lg-0\"\n          >\n            <FormFile className=\"d-inline-block\">\n              <FormFile.Label htmlFor=\"fileUpload\">\n                <span className=\"btn btn-primary\">\n                  <Icon\n                    path={mdiFileUploadOutline}\n                    title=\"Upload\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Upload spreadsheet\n                </span>\n              </FormFile.Label>\n              <FormFile.Input\n                className=\"d-none\"\n                id=\"fileUpload\"\n                onChange={handleFileUpload}\n                accept=\".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n              />\n            </FormFile>{' '}\n            <DropdownButton\n              className=\"d-inline-block\"\n              variant=\"outline-success\"\n              id=\"downloadDropdown\"\n              menuAlign=\"right\"\n              title={\n                <>\n                  <Icon\n                    path={mdiFileDownloadOutline}\n                    title=\"Download\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Download\n                </>\n              }\n            >\n              <Dropdown.Item onClick={() => downloadSheet('xlsx')}>\n                Excel 2007 (.xlsx)\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => downloadSheet('csv')}>\n                CSV (.csv)\n              </Dropdown.Item>\n            </DropdownButton>{' '}\n            <DropdownButton\n              className=\"d-inline-block\"\n              variant=\"outline-secondary\"\n              id=\"settingsDropdown\"\n              menuAlign=\"right\"\n              bsPrefix=\"\"\n              title={\n                <>\n                  <Icon\n                    path={mdiCog}\n                    title=\"Settings\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                </>\n              }\n            >\n              <Dropdown.Item onClick={() => changeAllEditors(true)}>\n                <Icon path={mdiMonitorEdit} size={1} className=\"mr-1\" />\n                Edit all as rich HTML\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => changeAllEditors(false)}>\n                <Icon path={mdiFormTextbox} size={1} className=\"mr-1\" />\n                Edit all as labels\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item\n                className=\"text-danger\"\n                onClick={() => {\n                  setFilename(null)\n                  setUploadedWorkbook(null)\n                  setSheet(DEFAULT_SHEET)\n                  setRowMetadata({})\n                }}\n              >\n                <Icon path={mdiRestart} size={1} className=\"mr-1\" />\n                Restart app\n              </Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n        <Row as=\"main\" className=\"mt-5 mb-3\">\n          <Col>\n            <Table striped bordered>\n              <thead>\n                <tr>\n                  <th style={{ width: '1%' }}>Row</th>\n                  <th className=\"w-25\">{sheet[0][0]}</th>\n                  <th>{sheet[0][1]}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {sheet &&\n                  sheet.slice(1).map((row, rowIndex) => {\n                    const sheetRowIndex = rowIndex + 1\n                    return (\n                      <tr key={sheetRowIndex}>\n                        <td className=\"text-center\">\n                          <code>{sheetRowIndex + 1}</code>\n                        </td>\n                        <td>\n                          <Form.Control\n                            className=\"position-sticky\"\n                            type=\"text\"\n                            placeholder={sheet[0][0]}\n                            value={row[0]}\n                            onChange={e =>\n                              updateCell(sheetRowIndex, 0, e.target.value)\n                            }\n                          />\n                        </td>\n                        <td>\n                          {rowMetadata &&\n                          rowMetadata[sheetRowIndex] &&\n                          rowMetadata[sheetRowIndex].html ? (\n                            <VisualEditor\n                              value={row[1]}\n                              onEditorChange={content =>\n                                updateCell(sheetRowIndex, 1, content)\n                              }\n                            />\n                          ) : (\n                            <Form.Row>\n                              <Col>\n                                <Form.Control\n                                  type=\"text\"\n                                  placeholder={sheet[0][1]}\n                                  value={row[1]}\n                                  onChange={e =>\n                                    updateCell(sheetRowIndex, 1, e.target.value)\n                                  }\n                                  onFocus={() =>\n                                    isHTML(row[1]) &&\n                                    enableVisualEditor(sheetRowIndex)\n                                  }\n                                />\n                              </Col>\n                              <Col xs=\"auto\">\n                                <Button\n                                  variant=\"outline-primary\"\n                                  onClick={() =>\n                                    enableVisualEditor(sheetRowIndex)\n                                  }\n                                >\n                                  <Icon\n                                    path={mdiPencil}\n                                    title=\"Edit\"\n                                    size={1}\n                                    className=\"mr-1\"\n                                  />\n                                  HTML\n                                </Button>\n                              </Col>\n                            </Form.Row>\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  })}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row as=\"footer\" className=\"pt-3 border-top\">\n          <Col className=\"text-center text-muted\">\n            <ul className=\"list-inline\">\n              <li className=\"list-inline-item mr-2 pr-2 border-right\">\n                Made by the{' '}\n                <a href=\"https://github.com/jcu-eresearch\">\n                  JCU eResearch Centre\n                </a>\n              </li>\n              <li className=\"list-inline-item mr-2 pr-2 border-right\">\n                <a href=\"https://github.com/jcu-eresearch/redbox-language-editor\">\n                  <Icon\n                    path={mdiGithub}\n                    title=\"GitHub\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Source code\n                </a>\n              </li>\n              <li className=\"list-inline-item\">v{version}</li>\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}